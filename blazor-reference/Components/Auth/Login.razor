@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Elevation="4" Class="pa-8">
        <MudGrid Justify="Justify.Center" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.Store" Size="Size.Large" Color="Color.Primary" />
        </MudGrid>
        
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-2">Sign in to your account</MudText>
        <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Secondary" Class="mb-6">
            Access your seller portal
        </MudText>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
            }

            <MudTextField @bind-Value="loginModel.Email"
                         Label="Email address"
                         Variant="Variant.Outlined"
                         InputType="InputType.Email"
                         Required="true"
                         FullWidth="true"
                         Class="mb-4"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Filled.Email" />

            <MudTextField @bind-Value="loginModel.Password"
                         Label="Password"
                         Variant="Variant.Outlined"
                         InputType="@passwordInputType"
                         Required="true"
                         FullWidth="true"
                         Class="mb-4"
                         Adornment="Adornment.End"
                         AdornmentIcon="@passwordIcon"
                         OnAdornmentClick="TogglePasswordVisibility" />

            <MudGrid Justify="Justify.SpaceBetween" AlignItems="Center.Center" Class="mb-4">
                <MudItem>
                    <MudLink Href="/forgot-password" Color="Color.Primary">
                        Forgot your password?
                    </MudLink>
                </MudItem>
            </MudGrid>

            <MudButton ButtonType="ButtonType.Submit"
                      Variant="Variant.Filled"
                      Color="Color.Primary"
                      FullWidth="true"
                      Size="Size.Large"
                      Class="mb-4"
                      Disabled="isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <text>Signing in...</text>
                }
                else
                {
                    <text>Sign in</text>
                }
            </MudButton>

            <MudText Typo="Typo.body2" Align="Align.Center">
                Don't have an account?
                <MudLink Href="/register" Color="Color.Primary">Sign up</MudLink>
            </MudText>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private bool showPassword = false;
    private InputType passwordInputType = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await SignInManager.PasswordSignInAsync(
                loginModel.Email, 
                loginModel.Password, 
                isPersistent: false, 
                lockoutOnFailure: false);

            if (result.Succeeded)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login.";
            // Log exception
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        passwordInputType = showPassword ? InputType.Text : InputType.Password;
        passwordIcon = showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }
}