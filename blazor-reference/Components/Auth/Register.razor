@page "/register"
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Elevation="4" Class="pa-8">
        <MudGrid Justify="Justify.Center" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.Store" Size="Size.Large" Color="Color.Primary" />
        </MudGrid>
        
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-2">Create your account</MudText>
        <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Secondary" Class="mb-6">
            Join our seller community
        </MudText>

        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
            }

            <MudGrid>
                <MudItem xs="6">
                    <MudTextField @bind-Value="registerModel.FirstName"
                                 Label="First Name"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 FullWidth="true"
                                 Class="mb-4"
                                 Adornment="Adornment.Start"
                                 AdornmentIcon="@Icons.Material.Filled.Person" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="registerModel.LastName"
                                 Label="Last Name"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 FullWidth="true"
                                 Class="mb-4"
                                 Adornment="Adornment.Start"
                                 AdornmentIcon="@Icons.Material.Filled.Person" />
                </MudItem>
            </MudGrid>

            <MudTextField @bind-Value="registerModel.Email"
                         Label="Email address"
                         Variant="Variant.Outlined"
                         InputType="InputType.Email"
                         Required="true"
                         FullWidth="true"
                         Class="mb-4"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Filled.Email" />

            <MudTextField @bind-Value="registerModel.Password"
                         Label="Password"
                         Variant="Variant.Outlined"
                         InputType="@passwordInputType"
                         Required="true"
                         FullWidth="true"
                         Class="mb-4"
                         Adornment="Adornment.End"
                         AdornmentIcon="@passwordIcon"
                         OnAdornmentClick="TogglePasswordVisibility" />

            <MudTextField @bind-Value="registerModel.ConfirmPassword"
                         Label="Confirm Password"
                         Variant="Variant.Outlined"
                         InputType="@confirmPasswordInputType"
                         Required="true"
                         FullWidth="true"
                         Class="mb-4"
                         Adornment="Adornment.End"
                         AdornmentIcon="@confirmPasswordIcon"
                         OnAdornmentClick="ToggleConfirmPasswordVisibility" />

            <MudButton ButtonType="ButtonType.Submit"
                      Variant="Variant.Filled"
                      Color="Color.Primary"
                      FullWidth="true"
                      Size="Size.Large"
                      Class="mb-4"
                      Disabled="isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <text>Creating account...</text>
                }
                else
                {
                    <text>Create account</text>
                }
            </MudButton>

            <MudText Typo="Typo.body2" Align="Align.Center">
                Already have an account?
                <MudLink Href="/login" Color="Color.Primary">Sign in</MudLink>
            </MudText>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private RegisterModel registerModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    
    private bool showPassword = false;
    private InputType passwordInputType = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;
    
    private bool showConfirmPassword = false;
    private InputType confirmPasswordInputType = InputType.Password;
    private string confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;

    public class RegisterModel
    {
        [Required]
        public string FirstName { get; set; } = string.Empty;

        [Required]
        public string LastName { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(100, MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;

        [Required]
        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var user = new IdentityUser 
            { 
                UserName = registerModel.Email, 
                Email = registerModel.Email 
            };

            var result = await UserManager.CreateAsync(user, registerModel.Password);

            if (result.Succeeded)
            {
                await SignInManager.SignInAsync(user, isPersistent: false);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration.";
            // Log exception
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        passwordInputType = showPassword ? InputType.Text : InputType.Password;
        passwordIcon = showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
        confirmPasswordInputType = showConfirmPassword ? InputType.Text : InputType.Password;
        confirmPasswordIcon = showConfirmPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }
}