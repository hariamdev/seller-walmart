@page "/products"
@using MudBlazor
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@attribute [Authorize]
@inject IProductService ProductService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4 mb-4">
                <MudGrid AlignItems="Center.Center" Justify="Justify.SpaceBetween">
                    <MudItem>
                        <MudText Typo="Typo.h4">Products</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Manage your product inventory
                        </MudText>
                    </MudItem>
                    <MudItem>
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.Add"
                                  OnClick="OpenAddProductDialog">
                            Add Product
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Class="pa-4 mb-4">
                <MudGrid>
                    <MudItem xs="12" md="8">
                        <MudTextField @bind-Value="searchTerm"
                                     Label="Search products..."
                                     Variant="Variant.Outlined"
                                     Adornment="Adornment.Start"
                                     AdornmentIcon="@Icons.Material.Filled.Search"
                                     OnKeyUp="OnSearchChanged"
                                     Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSelect @bind-Value="statusFilter" 
                                  Label="Status Filter" 
                                  Variant="Variant.Outlined"
                                  OnSelectionChanged="OnFilterChanged">
                            <MudSelectItem Value="@("all")">All Status</MudSelectItem>
                            <MudSelectItem Value="@("active")">Active</MudSelectItem>
                            <MudSelectItem Value="@("inactive")">Inactive</MudSelectItem>
                            <MudSelectItem Value="@("draft")">Draft</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper>
                <MudDataGrid T="Product" 
                            Items="@filteredProducts" 
                            Loading="@isLoading"
                            Hover="true"
                            Striped="true"
                            FixedHeader="true"
                            Height="600px">
                    
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Product">
                            <CellTemplate>
                                <MudGrid AlignItems="Center.Center">
                                    <MudItem>
                                        <MudAvatar Color="Color.Secondary" Size="Size.Medium">
                                            <MudIcon Icon="@Icons.Material.Filled.Inventory" />
                                        </MudAvatar>
                                    </MudItem>
                                    <MudItem>
                                        <MudText Typo="Typo.body1">@context.Item.Name</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">@context.Item.Category</MudText>
                                    </MudItem>
                                </MudGrid>
                            </CellTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.Sku" Title="SKU" />

                        <PropertyColumn Property="x => x.Price" Title="Price">
                            <CellTemplate>
                                <MudText>$@context.Item.Price.ToString("F2")</MudText>
                            </CellTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.Quantity" Title="Quantity" />

                        <PropertyColumn Property="x => x.Status" Title="Status">
                            <CellTemplate>
                                <MudChip Color="@GetStatusColor(context.Item.Status)" 
                                        Size="Size.Small" 
                                        Variant="Variant.Filled">
                                    @context.Item.Status.ToString().ToUpper()
                                </MudChip>
                            </CellTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.UpdatedAt" Title="Updated">
                            <CellTemplate>
                                <MudText>@context.Item.UpdatedAt.ToString("MMM dd, yyyy")</MudText>
                            </CellTemplate>
                        </PropertyColumn>

                        <TemplateColumn Title="Actions" Sortable="false">
                            <CellTemplate>
                                <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                                  Color="Color.Primary" 
                                                  Size="Size.Small"
                                                  OnClick="() => ViewProduct(context.Item)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                  Color="Color.Secondary" 
                                                  Size="Size.Small"
                                                  OnClick="() => EditProduct(context.Item)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                  Color="Color.Error" 
                                                  Size="Size.Small"
                                                  OnClick="() => DeleteProduct(context.Item)" />
                                </MudButtonGroup>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>

                    <NoRecordsContent>
                        <MudGrid Justify="Justify.Center" Class="pa-8">
                            <MudItem>
                                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Secondary" />
                                <MudText Typo="Typo.h6" Align="Align.Center" Class="mt-2">No products</MudText>
                                <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Secondary">
                                    Get started by creating a new product.
                                </MudText>
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.Add"
                                          Class="mt-4"
                                          OnClick="OpenAddProductDialog">
                                    Add Product
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </NoRecordsContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Product> products = new();
    private List<Product> filteredProducts = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string statusFilter = "all";

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        isLoading = true;
        try
        {
            products = await ProductService.GetProductsAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading products", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        filteredProducts = products.Where(p =>
            (string.IsNullOrEmpty(searchTerm) || 
             p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             p.Sku.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (statusFilter == "all" || p.Status.ToString().ToLower() == statusFilter)
        ).ToList();
    }

    private void OnSearchChanged()
    {
        ApplyFilters();
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
    }

    private Color GetStatusColor(ProductStatus status)
    {
        return status switch
        {
            ProductStatus.Active => Color.Success,
            ProductStatus.Inactive => Color.Error,
            ProductStatus.Draft => Color.Warning,
            _ => Color.Default
        };
    }

    private async Task OpenAddProductDialog()
    {
        var dialog = await DialogService.ShowAsync<AddProductDialog>("Add Product");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadProducts();
        }
    }

    private async Task ViewProduct(Product product)
    {
        var parameters = new DialogParameters { ["Product"] = product };
        await DialogService.ShowAsync<ViewProductDialog>("Product Details", parameters);
    }

    private async Task EditProduct(Product product)
    {
        var parameters = new DialogParameters { ["Product"] = product };
        var dialog = await DialogService.ShowAsync<EditProductDialog>("Edit Product", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadProducts();
        }
    }

    private async Task DeleteProduct(Product product)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Are you sure you want to delete '{product.Name}'?",
            ["ButtonText"] = "Delete",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<MudMessageBox>("Delete Product", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await ProductService.DeleteProductAsync(product.Id);
                Snackbar.Add("Product deleted successfully", Severity.Success);
                await LoadProducts();
            }
            catch (Exception ex)
            {
                Snackbar.Add("Error deleting product", Severity.Error);
            }
        }
    }
}