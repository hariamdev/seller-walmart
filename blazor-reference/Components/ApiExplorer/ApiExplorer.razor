@page "/api-explorer"
@using MudBlazor
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IWalmartApiService WalmartApiService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Class="mb-2">API Explorer</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                Test Walmart Marketplace API endpoints directly from your browser
            </MudText>
        </MudItem>

        <MudItem xs="12" lg="5">
            <MudPaper Class="pa-4" Style="height: 600px; overflow-y: auto;">
                <MudTextField @bind-Value="searchTerm"
                             Label="Search endpoints..."
                             Variant="Variant.Outlined"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             OnKeyUp="FilterEndpoints"
                             Immediate="true"
                             Class="mb-4" />

                @foreach (var category in groupedEndpoints.Keys)
                {
                    <MudExpansionPanels Elevation="0" Class="mb-2">
                        <MudExpansionPanel IsInitiallyExpanded="@(category == "Items")">
                            <TitleContent>
                                <div style="display: flex; align-items: center;">
                                    <MudText Typo="Typo.subtitle1"><strong>@category</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                @foreach (var endpoint in groupedEndpoints[category])
                                {
                                    <MudButton Variant="@(selectedEndpoint?.Id == endpoint.Id ? Variant.Filled : Variant.Text)"
                                              Color="@(selectedEndpoint?.Id == endpoint.Id ? Color.Primary : Color.Default)"
                                              FullWidth="true"
                                              Class="mb-2 justify-start"
                                              OnClick="() => SelectEndpoint(endpoint)">
                                        <div style="display: flex; align-items: center; width: 100%; text-align: left;">
                                            <MudChip Color="@GetMethodColor(endpoint.Method)" 
                                                    Size="Size.Small" 
                                                    Class="mr-2">
                                                @endpoint.Method
                                            </MudChip>
                                            <div style="flex: 1; min-width: 0;">
                                                <MudText Typo="Typo.body2" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                    @endpoint.Path
                                                </MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                    @endpoint.Description
                                                </MudText>
                                            </div>
                                        </div>
                                    </MudButton>
                                }
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                }
            </MudPaper>
        </MudItem>

        <MudItem xs="12" lg="7">
            @if (selectedEndpoint != null)
            {
                <MudPaper Class="pa-6 mb-4">
                    <MudGrid AlignItems="Center.Center" Class="mb-4">
                        <MudItem>
                            <MudChip Color="@GetMethodColor(selectedEndpoint.Method)" Size="Size.Medium">
                                @selectedEndpoint.Method
                            </MudChip>
                        </MudItem>
                        <MudItem>
                            <MudText Typo="Typo.h6">@selectedEndpoint.Path</MudText>
                        </MudItem>
                    </MudGrid>
                    
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-6">
                        @selectedEndpoint.Description
                    </MudText>

                    @if (selectedEndpoint.Parameters?.Any() == true)
                    {
                        <MudText Typo="Typo.subtitle1" Class="mb-4"><strong>Parameters</strong></MudText>
                        @foreach (var param in selectedEndpoint.Parameters)
                        {
                            <MudTextField @bind-Value="parameters[param.Name]"
                                         Label="@param.Name"
                                         Variant="Variant.Outlined"
                                         HelperText="@param.Description"
                                         Required="@param.Required"
                                         InputType="@(param.Type == "number" ? InputType.Number : InputType.Text)"
                                         Class="mb-4" />
                        }
                    }

                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.PlayArrow"
                              OnClick="ExecuteEndpoint"
                              Disabled="isExecuting">
                        @if (isExecuting)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                            <text>Executing...</text>
                        }
                        else
                        {
                            <text>Execute</text>
                        }
                    </MudButton>
                </MudPaper>

                @if (apiResponse != null)
                {
                    <MudPaper Class="pa-6">
                        <MudGrid AlignItems="Center.Center" Class="mb-4">
                            <MudItem>
                                <MudIcon Icon="@Icons.Material.Filled.Code" />
                            </MudItem>
                            <MudItem>
                                <MudText Typo="Typo.h6">Response</MudText>
                            </MudItem>
                            <MudItem>
                                @if (apiResponse.Status >= 200 && apiResponse.Status < 300)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                }
                                <MudChip Color="@(apiResponse.Status >= 200 && apiResponse.Status < 300 ? Color.Success : Color.Error)" 
                                        Size="Size.Small">
                                    @apiResponse.Status
                                </MudChip>
                            </MudItem>
                            <MudItem>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    @apiResponse.Timestamp.ToString("HH:mm:ss")
                                </MudText>
                            </MudItem>
                        </MudGrid>

                        <MudExpansionPanels Elevation="0">
                            <MudExpansionPanel Text="Headers">
                                <MudPaper Class="pa-4" Style="background-color: var(--mud-palette-background-grey);">
                                    <pre style="margin: 0; font-size: 12px; color: var(--mud-palette-text-secondary);">@System.Text.Json.JsonSerializer.Serialize(apiResponse.Headers, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
                                </MudPaper>
                            </MudExpansionPanel>

                            <MudExpansionPanel Text="Body" IsInitiallyExpanded="true">
                                <MudPaper Class="pa-4" Style="background-color: var(--mud-palette-background-grey); max-height: 400px; overflow-y: auto;">
                                    <pre style="margin: 0; font-size: 12px; color: var(--mud-palette-text-secondary);">@System.Text.Json.JsonSerializer.Serialize(apiResponse.Data, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
                                </MudPaper>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudPaper>
                }
            }
            else
            {
                <MudPaper Class="pa-12" Style="text-align: center;">
                    <MudIcon Icon="@Icons.Material.Filled.Search" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                    <MudText Typo="Typo.h6" Class="mb-2">Select an Endpoint</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Choose an endpoint from the list to test it with custom parameters.
                    </MudText>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<WalmartEndpoint> endpoints = new();
    private Dictionary<string, List<WalmartEndpoint>> groupedEndpoints = new();
    private WalmartEndpoint? selectedEndpoint;
    private Dictionary<string, string> parameters = new();
    private ApiResponse? apiResponse;
    private bool isExecuting = false;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEndpoints();
        FilterEndpoints();
    }

    private async Task LoadEndpoints()
    {
        endpoints = await WalmartApiService.GetEndpointsAsync();
    }

    private void FilterEndpoints()
    {
        var filtered = string.IsNullOrEmpty(searchTerm) 
            ? endpoints 
            : endpoints.Where(e => 
                e.Path.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();

        groupedEndpoints = filtered.GroupBy(e => e.Category)
                                  .ToDictionary(g => g.Key, g => g.ToList());
    }

    private void SelectEndpoint(WalmartEndpoint endpoint)
    {
        selectedEndpoint = endpoint;
        parameters.Clear();
        apiResponse = null;

        if (endpoint.Parameters != null)
        {
            foreach (var param in endpoint.Parameters)
            {
                parameters[param.Name] = string.Empty;
            }
        }
    }

    private async Task ExecuteEndpoint()
    {
        if (selectedEndpoint == null) return;

        isExecuting = true;
        apiResponse = null;

        try
        {
            apiResponse = await WalmartApiService.ExecuteEndpointAsync(selectedEndpoint, parameters);
            Snackbar.Add("Request executed successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error executing request", Severity.Error);
            apiResponse = new ApiResponse
            {
                Status = 500,
                Data = new { error = ex.Message },
                Headers = new Dictionary<string, string>(),
                Timestamp = DateTime.UtcNow
            };
        }
        finally
        {
            isExecuting = false;
        }
    }

    private Color GetMethodColor(string method)
    {
        return method switch
        {
            "GET" => Color.Success,
            "POST" => Color.Primary,
            "PUT" => Color.Warning,
            "DELETE" => Color.Error,
            _ => Color.Default
        };
    }
}